package com.example.websocketdemo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.example.websocketdemo.entity.User;
import com.example.websocketdemo.repository.UserRepository;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/admin") // This means URL's start with /demo (after Application path)
public class AdminController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping // Map ONLY GET Requests
    public ModelAndView index(HttpServletRequest request, HttpServletResponse response) throws IOException {
        ModelAndView modelAndView = new ModelAndView("/admin");
        String clientAddr = request.getLocalAddr();
        String localAddr1 = "127.0.0.1";
        String localAddr2 = "0:0:0:0:0:0:0:1";
        System.out.println(clientAddr);
        if (clientAddr.equals(localAddr1)|| clientAddr.equals(localAddr2)){
            List<User> userList = userRepository.findAll();
            modelAndView.addObject("userList", userList);
        } else {
//            return new ModelAndView("redirect:/login");
        }
        return modelAndView;
    }

    @PostMapping(path="/deleteUser") // Map ONLY POST Requests
    public ModelAndView deleteUser(@RequestParam String userName){
        ModelAndView modelAndView = new ModelAndView("/admin");

        List<User> userList = userRepository.findByUserName(userName);
        userRepository.delete(userList.get(0));

        userList = userRepository.findAll();
        modelAndView.addObject("userList", userList);
        return modelAndView;
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public ModelAndView AddNewUser (@RequestParam String userName
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        ModelAndView modelAndView = new ModelAndView("/admin");

        User newUser = new User(userName,password);

        List<User> userList = userRepository.findByUserName(userName);
        if(userList.size() == 0){
            userRepository.save(newUser);
        }

        userList = userRepository.findAll();
        modelAndView.addObject("userList", userList);
        return modelAndView;
    }
}