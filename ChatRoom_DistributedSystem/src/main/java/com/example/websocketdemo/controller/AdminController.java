package com.example.websocketdemo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.websocketdemo.entity.User;
import com.example.websocketdemo.repository.UserRepository;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/admin") // This means URL's start with /demo (after Application path)
public class AdminController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

//    @GetMapping // Map ONLY GET Requests
//    public String toAdmin(){
//        return "admin";
//    }

    @GetMapping(path="/getUserList") // Map ONLY GET Requests
    public ModelAndView index(){
        ModelAndView modelAndView = new ModelAndView("/admin");
        List<User> userList = userRepository.findAll();

        modelAndView.addObject("userList", userList);
        return modelAndView;
    }

    @GetMapping(path="/deleteUser") // Map ONLY GET Requests
    public ModelAndView deleteUser(@RequestParam String userName){
        ModelAndView modelAndView = new ModelAndView("/admin");

        List<User> userList = userRepository.findByUserName(userName);
        userRepository.delete(userList.get(0));

        userList = userRepository.findAll();
        modelAndView.addObject("userList", userList);
        return modelAndView;
    }

    @GetMapping(path="/add") // Map ONLY GET Requests
    public ModelAndView AddNewUser (@RequestParam String userName
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        ModelAndView modelAndView = new ModelAndView("/admin");

        User newUser = new User(userName,password);

        List<User> userList = userRepository.findByUserName(userName);
        if(userList.size() == 0){
            userRepository.save(newUser);
        }

        userList = userRepository.findAll();
        modelAndView.addObject("userList", userList);
        return modelAndView;
    }
}